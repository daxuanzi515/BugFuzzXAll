from qiskit import QuantumCircuit

class TwoQubitGate(Gate): 
    def __init__(self, name = None):
        super().__init__(2, name)
    def qasm(self, name):
        return QasmQobjInstruction(["cswap", name[0], name[1], name[2]])
    def decomposition(self, name): 
        ccx = QuantumCircuit(3)
        ccx.cx(ccx.qubits[0], ccx.qubits[1])
        ccx

# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
