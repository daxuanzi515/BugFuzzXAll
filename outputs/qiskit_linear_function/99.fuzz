from qiskit import QuantumCircuit

class LinearFunction(object): 
	def __init__(self, function): 
		self.function = function
class Gate(LinearFunction): 
	def __init__(self, params, function, num_qubits): 
		self.params = {'theta': float(theta)} 
		self.function = function
		self.num_qubits = int(num_qubits)
		self.matrix = self._get_matrix()
		self.qasm = self._get_qasm()

	def _get_matrix(self):
		pass

	def _get_qasm(self):
		pass

# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
