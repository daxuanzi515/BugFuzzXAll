from qiskit import QuantumCircuit

from qiskit.quantum_info import Operator
from qiskit.circuit import Gate
from qiskit.compiler import transpile, assemble
from qiskit.qobj import QasmQobjInstruction
from qiskit.extensions.quantum_initializer import Initialize
from math import exp, sqrt
import qiskit
from qiskit.quantum_info.synthesis import (OneQubitEulerDecomposer, TwoQubitBasisDecomposer,
                                               OneQubitEulerDecomposerLibrary, TwoQubitBasisDecomposerLibrary)
import warnings
import numpy as np
import time

print(qiskit.__qiskit_version__['qiskit'])


# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
