from qiskit import QuantumCircuit

backend = BasicAer.get_backend('statevector_simulator')
circuit = QuantumCircuit(4)
linear_function = LinearFunction(lambda p: U3Gate(p,0,0,0), [0.75, 1.5, 2.25])
linear_function(circuit, params = [0.125, 0.25, 0.375], qubits = [0,2], ctrl = 1)
circuit.draw('mpl')
job = execute(circuit, backend, shots = 0)
state = job.result().get_statevector()
print("4 qubit circuit constructed using the LinearFunction API:")
display(Matrix(state.data.reshape(16, 1)[:, 0]))

# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
