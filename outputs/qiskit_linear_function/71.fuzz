from qiskit import QuantumCircuit

class Gate(object):
  def __init__(self, name, parameters, label=None, ctrl=False, unitary=False, num_qubits=1):
    self.__name__ = name; self.__parameters__ = parameters; self.__num_qubits__ = num_qubits; self.__label__ = label;
    self.__decompositions__ = dict(); self.ctrl = ctrl; self.unitary = unitary; self.__unitary__gate__ = None;
  def defaultToString(self):
      return '{ self.__name__ } '
      if self.__label__!= None:
        return '{self.__label__} : { self.__name__ } '
  def qasmToString(self): return 'H {self.params} {self.target};'
  def setUnitaryGate(self, gate): self.__unitary__gate__ = gate
  def setAsymmetric(self, asymmetric): pass
  def getAsymmetric(self): pass
  def __str__(self): return 'Gate'+ self.defaultToString()
  def __repr__(self): return 'Gate'+ self.defaultToString()
  def addDecomposition(self, target, decomposition):
    if(target + len(decomposition) > self.__num_qubits__): raise ValueError
    if len(decomposition) == 1: self.__decompositions__[target] = decomposition[0]
    else: self.__decompositions__[target] = decomposition


# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
