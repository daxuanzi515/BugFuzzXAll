from qiskit import QuantumCircuit


def x_gate(qr, index):
    qr[index].x()


def z_gate(qr, index):
    qr[index].z()


qc = QuantumCircuit(3)
qr = qc.qubits
x_gate(qr, 0)
z_gate(qr, 1)
qc.draw()
import numpy as np


class Gate(object):
    def __init__(self, num_qubits):
        self.num_qubits = num_qubits
        self.__matrix = np.eye(2 ** num_qubits)

    def run(self):
        pass
qgate = Gate(1)
print(qgate.num_qubits)
qgate1 = Gate(1)
print(qgate1.num_qubits)<jupyter_output>8
8

# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
