from qiskit import QuantumCircuit

n = 5
xrange = [i for i in range(n)]
yrange = [i + n for i in xrange]
g = QuantumCircuit(n+n, n)

g.cx(4,0)
g.rz(2.1, 0)
g.cx(2,0)
g.rz(0.5, 0)
g.cx(0,3)
g.rz(0, 5)
g.cx(4,1)
g.rz(2.2, 1)
g.cx(2,1)
g.rz(0.6, 1)
g.cx(0,4)
g.rz(0, 5)
g.cx(3,2)
g.rz(2, 2)
g.cx(1,2)
g.rz(0.7, 2)
g.cx(0,5)
g.rz(0, 5)
g.cx(3,4)
g.rz(2.1, 4)
g.cx(1,4)
g.rz(0.8, 4)
g.cx(0,5)
g.rz(0, 5)

print(g.draw())
    

# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
