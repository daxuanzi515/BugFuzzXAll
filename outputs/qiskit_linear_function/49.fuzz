from qiskit import QuantumCircuit

def cswap(x, y, z):
    QuantumCircuit().cswap(x, y, z)


backend = IBMQ.get_backend('ibmq_16_melbourne')


qasm = circuit.qasm()
print(qasm)

results = backend.run(qasm).result()

plot_histogram(results.get_counts())


from qiskit.compiler import transpile
transpile(orig_circ, backend=get_backend('ibmq_16_melbourne'))


from qiskit.compiler import transpile

from qiskit import IBMQ

backend = IBMQ.get_backend('ibmq_16_melbourne')
transpile(orig_circ, backend=backend)



circuit=QuantumCircuit()
circuit.h(0)
circuit.h(1)
circuit.h(2)
circuit.h(3)
circuit.measure_all()

transpiled_circuit = transpile(circuit, basis_gates=get_basis_gates('default', 'projectq_simulator'),
                              coupling_map=get_coupling_map('ibmq_16_melbourne'),
                              initial_layout=get_initial_layout(circuit, 'ibmq_16_melbourne'),
                              )

backend = BasicAer.get_backend('projectq_simulator')
job = qiskit.execute(transpiled_circuit, backend)



# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
