#include <variant>
<fim_suffix>a function object (which has an operator() defined). */
 
 
 
 
 
 
 
 

 
<fim_middle>#include <iostream>
struct V {
    int i;
    float f;
    double d;
    void print() { 
        std::cout << "The variant has the value " << d << "\n";
    }
};
V create() {
    V v = {10, 0.0f, 0.0};
    v.f = 32.24f;
    return v;
}
int main() 
{
    V v = create(); 
    v.print();
}
 
 
/* The std::variant template is a great tool, but there are other interesting alternatives out there that offer different or better functionality. What other choices would you consider for this problem?