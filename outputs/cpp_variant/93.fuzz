#include <variant>
<fim_suffix>e_test.hpp>
#include <fstream>
#include <vector>
int main(int argc, const char** argv) {
    struct A {
        int field = 22;
        bool another_field = false;
    };
    constexpr std::size_t max_size = 20e3;
    std::vector<A> vec;
    std::cout << "pushing: ";
    std::chrono::steady_clock::time_point tp1 = std::chrono::steady_clock::now();
    for (size_t i = 0; i < max_size; ++i) {
        vec.push_back(A());
    }
    std::chrono::steady_clock::time_point tp2 = std::chrono::steady_clock::now(); 
     
    std::chrono::duration<double> time_span = 
    std::chrono::duration_cast<std::chrono::duration<double>>(tp2 - tp1);
    std::cout << time_span.count() << "s\n";
    std::cout << "adding: ";
    std::chrono::steady_clock::time_point tp3 = std::chrono::steady_clock::now();
    std::vector<A> vec2(vec);
    vec.clear();
    std::chrono::steady_clock::time_point tp4 = std::chrono::steady_clock::now(); 
    std::chrono::duration<double> time_span2 =
    std::chrono::duration_cast<std::chrono::duration<double>>(tp4 - tp3);
    std::cout << time_span2.count() << "s\n";
    return 0;
}

/* Please