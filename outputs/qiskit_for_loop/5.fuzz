from qiskit import QuantumCircuit


num_qubits = 3
q = QuantumRegister(num_qubits)
c = ClassicalRegister(num_qubits)
qc = QuantumCircuit(q,c)


for i in range(1,10,2):
    with qc.for_loop(
        range(3),
        i,
        QuantumCircuit(q,c).h(q[0]),
        qubits=q,
        clbits=c
    ) as loop:
        loop.append(
            QuantumCircuit(q,c).barrier(q),
            qubits=q,
            clbits=c
        )
        loop.append(
            QuantumCircuit(q,c).measure(q,c),
            qubits=q,
            clbits=c,
        )
qc.draw('mpl') 

# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
