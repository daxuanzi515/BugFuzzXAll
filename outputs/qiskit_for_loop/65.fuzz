from qiskit import QuantumCircuit

qc = QuantumCircuit(2)


circuit = QuantumCircuit(2,3)
state = QuantumCircuit(2)

for qubit_index in range(0,4): 
    
    
    state = state.h(qubit_index).s(qubit_index)   
    
    
    state = state.cu1(0.55357, qubit_index,1)
    
    circuit = circuit.measure(qubit_index,qubit_index)
    
    if qubit_index!= 3: 
        with circuit.for_loop(qubit_index, range(0,4), "qubit_index", state) as circuit2: 
            
            circuit2 = circuit2.append(state,[qubit_index]) 
            
            if qubit_index!= 3:          
                
                circuit2 = circuit2.measure(qubit_index,qubit_index)

print("Circuit with two for_loops:")
print(circuit)



# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
