from qiskit import QuantumCircuit


reg = QuantumRegister(3, 'qreg')
creg = ClassicalRegister(reg.size(), 'creg')
qc = QuantumCircuit(reg, creg)

def loop_body(qc, qubits, clbits, i, j):
    qc.p(0.125*i, 0)
    qc.p(0.125*j, 1)
    qc.cx(qubits[0], qubits[1])
    qc.cx(qubits[0], qubits[2])

with qc.for_loop(indexset=range(15)) as for_loop_handler:
    body = loop_body
    for_loop_handler.p(0.25, 2)
    for_loop_handler.cx(0, 1).c_if(creg, 2)
    for_loop_handler.barrier([0, 1])
    for_loop_handler.m(0.5, [0, 1]).c_if(creg, 2)
    for_loop_handler.p(0.125, 1)
    for_loop_handler.measure_each(*creg).c_if(creg, 2)

print(qc)


# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
