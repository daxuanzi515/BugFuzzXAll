from qiskit import QuantumCircuit

from qiskit.circuit import for_loop

num_qubits = 3
cir=QuantumCircuit(num_qubits)

with for_loop(range(5), 'q', cir, range(1, 2)):
	cir.h(2)
	cir.h(1)

cir.draw


cir.measure_all()
cir.draw()




with for_loop(range(5), 'q', cir):
	cir.h(2)
	cir.h(1)

cir.draw()

# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
