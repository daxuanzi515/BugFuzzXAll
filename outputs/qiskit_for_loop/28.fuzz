from qiskit import QuantumCircuit

from qiskit_addon_for_loop import ForLoopOp
from qiskit.circuit.quantumregister import QuantumRegister

def body_fn(qc: QuantumCircuit, index_var: int, loop_var: int):
    qc.barrier(index_var)
    qc.h(loop_var)
    qc.barrier(loop_var)

qubits = QuantumRegister(2)
for_loop = ForLoopOp('indexset',
                     'loop_var',
                     body_fn,
                     qubits=qubits,
                     clbits=None,
                     label='for')

print('for loop:', for_loop)



# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
