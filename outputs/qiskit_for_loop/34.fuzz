from qiskit import QuantumCircuit

qr = QuantumRegister(10)
cr = ClassicalRegister(8)
circuit = QuantumCircuit(qr, cr)


index_set = [0,1]
loop_parameter = 'i'
circuit.h(qr)
with circuit.for_loop(index_set, loop_parameter, circuit.h, qubits=[circuit.qubits[0]], clbits=[circuit.clbits[0]]):
    circuit.h(qr)
    circuit.measure(qr, cr)


for i in range(0, 4):
    circuit.u1(i, circuit.qubits[0])
for i in range(0, 4):
    circuit.u2(i, i, circuit.qubits[0])
for i in range(0, 4):
    circuit.u3(i, i, i, circuit.qubits[0])


with circuit.while_loop(range(10, 2, -1)):
    circuit.barrier()
    circuit.h(circuit.qubits[0])
    circuit.barrier()
    circuit.measure(circuit.qubits[0], circuit.clbits[0])


circuit.draw()

# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
