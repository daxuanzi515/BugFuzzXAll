from qiskit import QuantumCircuit


num_qubits = 3
num_clbits = 2

qc = QuantumCircuit(num_qubits, num_clbits, name='for loop')



index_param = Parameter('i')
loop_body = QuantumCircuit(num_qubits, num_clbits, name='loop body')
loop_body.ry(index_param, [0, 1])
loop_body.rz(index_param, [1, 2])
loop_body.measure_all()
for_loop = qc.for_loop(range(5), index_param, loop_body, [0, 1], [2])


with for_loop as loop_indexset:
    loop_indexset.measure_all()



# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
