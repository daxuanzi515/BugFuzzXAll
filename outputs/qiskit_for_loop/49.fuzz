from qiskit import QuantumCircuit

for i in [0,5]:
    with QuantumCircuit.for_loop(
        indexset = [i, i+1],
        loop_parameter = 'p',
        body = [
            (QuantumCircuit.u3(10,1,2,'p'), [0]),
            (QuantumCircuit.u2(0,0,'p'), [0])
            ],
        qubits = [1],
        label = 'for_test',
        insert_barriers = True
        ) as circuit: 
        (QuantumCircuit.h(0), [0,1])
        

for i in ['a','b']:
    with QuantumCircuit.for_loop(
        indexset = [i, i+1],
        loop_parameter = 'p',
        body = [
            (QuantumCircuit.u3(10,1,2,2+int(p)%2), [0])
            ],
        qubits = [1],
        label = 'for_test2',
        insert_barriers = True 
    ) as circuit:
        (QuantumCircuit.h(0), [0,1])
        






for i in range(10):
    with QuantumCircuit.for_loop(
        indexset = [i, i+1, i+2], 
        body = [
            (QuantumCircuit.x, (j, 4)),
            (QuantumCircuit.h, (3,)),
            (QuantumCircuit.u3(10,1,2,'p'), (3,))
            ],
        max_iterations = None,       
        insert_barriers = False,      
        label = 'for_test0'
    ) as circuit:
        (QuantumCircuit.h(3), [0,1])
        


# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
