from qiskit import QuantumCircuit

qc = QuantumCircuit(2)
with qc.for_loop(range(3), i='j') as f:           
    f.mct(0, 1, 2)




from qiskit.circuit import QuantumCircuit
from qiskit.circuit.library import EfficientSU2

qc = QuantumCircuit(2, 1)

qc.append(EfficientSU2(4, reps=1, insert_barriers=False), qubits=[0, 1])


with qc.for_loop(range(1, 10), loop_parameter='i') as f:
    f.append(EfficientSU2(4, reps=1, insert_barriers=False, name='layer{}'.format(f.i)))

qc.draw()


# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
