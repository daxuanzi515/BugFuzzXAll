from qiskit import QuantumCircuit


def if_statement(q: QuantumCircuit):
    q.h(0)
    q.h(1)
    
    with q.if_test((0,), (1,)):
        q.cx(0, 1)

    q.x(0)


def test():
    q = QuantumCircuit()
    if_statement(q)
    print(q.draw())

    print(q.for_loop(indexset=range(5), loop_parameter=0, body=q.h, qubits=[0, 1], clbits=[]).circuit.draw())

test()

# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
