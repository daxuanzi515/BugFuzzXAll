from qiskit import QuantumCircuit

from qiskit.circuit.quantumcircuit import QuantumCircuit, QuantumRegister, ClassicalRegister

indexset = range(0, 8)


loop_parameter = indexset


with QuantumCircuit() as circuit:
    
    with circuit.for_loop(loop_parameter, indexset, 1) as for_loop:
        for_loop.rxc(0, 1)

    
    print(circuit)

qr = QuantumRegister(2)

cr = ClassicalRegister(2)


circuit = QuantumCircuit(qr, cr)





circuit.ch(qr[0], qr[1]).h(qr[0]).m(qr[0], cr[0]).h(qr[1]).cx(qr[0], qr[1]).h(qr[1]).m(qr[1], cr[1])


print(circuit)

print(circuit.data[0])


print(circuit.data[0][0])


circuit = QuantumCircuit(qr, cr)


circuit.h(qr[0])



circuit.crz(1, qr[0], qr[1]).m(qr, cr)


print(circuit)
from qiskit import QuantumRegister, ClassicalRegister, QuantumCircuit
from qiskit.circuit import ForLoopOp

qr = QuantumRegister(2, 'qr')
cr = ClassicalRegister(2, 'cr')
circuit = QuantumCircuit(qr, cr)


circuit.h(qr[0])

body = []

body.append(circuit.h(qr[1]))

body.append(circuit.x(qr[1]))

body.append(circuit.cx(qr[0], qr[1]))


# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
