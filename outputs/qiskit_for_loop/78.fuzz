from qiskit import QuantumCircuit

qc = QuantumCircuit()


qr1 = qc.add_register(QuantumRegister(3,'qr1'))
qr2 = qc.add_register(QuantumRegister(2,'qr2'))
cr = qc.add_register(ClassicalRegister(3,'cr'))



for i in qc.for_loop(range(3), loop_var=i):
    
    
    
    qc.add_register(QuantumRegister(2, f'qr{i}1'))
    qc.h(f'qr{i}1')

    
    
    
    
    qc.h(f'qr{i}1')
    
    
    
    qc.barrier(f'qr{i}1')
    
    
    qc.measure_all()
    
qc.draw('mpl')


from qiskit import QuantumCircuit, ClassicalRegister, QuantumRegister
qc = QuantumCircuit()

qr = qc.add_register([QuantumRegister(2, 'qr'), ClassicalRegister(2, 'cr')])

qc.h(qr[0])


qr_other = ClassicalRegister(2, name='qr1')
qc.add_register(qr_other)




qc.barrier()



if_result = qc.if_else(qc.measure(qr[0], cr[0]))
  

# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
