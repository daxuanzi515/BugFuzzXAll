from qiskit import QuantumCircuit

from qiskit.circuit import ForLoopOp

q = QuantumRegister(3)
circuit = QuantumCircuit(q)

loop = circuit.for_loop(1, 4, 1, q[0])
circuit.cx(q[0], q[1])
circuit.x(q[1])

with loop:
  circuit.h(q[0])
  circuit.cx(q[0], q[2])
  circuit.measure_single_qubit(q[0])
  circuit.measure_single_qubit(q[1], q[2])


print(circuit)


print(F"Qubits: {circuit.qubits}")
print(F"Clbits: {circuit.clbits}")


# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
