from qiskit import QuantumCircuit



def body(circuit, loop_parameter):
    circuit.h(loop_parameter)
    circuit.z(loop_parameter)
    

q = QuantumRegister(5, 'q')
c = ClassicalRegister(3, 'c')
circuit = QuantumCircuit(q, c)
with circuit.for_loop(indexset=range(0, 3), loop_parameter=q[0], body=body, qubits=q[3:], clbits=c[:]) as flop:
    circuit.y(q[flop.index])
    
circuit.draw(output='mpl')

from qiskit import QuantumRegister, QuantumCircuit, ForLoopOp, LoopOp
from qiskit.compiler import transpile
from qiskit.transpiler import CouplingMap
from qiskit.circuit.library.n_local import RY

q = QuantumRegister(2)

fop = ForLoopOp(
    body=quantum_rabi_oscillation(QuantumCircuit()),
    indexset=range(1, 7),
    loop_parameter=q,
)


circuit = QuantumCircuit(q, register_name='q')
for i in range(1, 7):
    
    
    qc = quantum_rabi_oscillation(circuit, i)        
print(qc)


print(transpile(fop.to_circuit(), CouplingMap([(1, 0), (2, 1), (3, 2), (4, 3), (5, 4), (6, 5)]), optimization_level=0))


circuit = QuantumCircuit(q, register_name='q')
for i in range(1, 7):
    
    
    circuit.append(RYGate(0.628 * i, 'q[0]').to_instruction(), [q[0]], [])
circuit.append(RYGate(2.721, 'q[0]').to_instruction(), [q[0]], [])
print(circuit)




# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
