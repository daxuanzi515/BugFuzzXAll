from qiskit import QuantumCircuit

from qiskit.tools.visualization import circuit_drawer


qr = QuantumRegister(4, name='q')
cr = ClassicalRegister(4, name='c')
qc = QuantumCircuit(qr, cr)


index = loop_var(range(10))


qc = for_loop(qc, index).label("for_loop_"+str(index)).set_indexset(range(index)).set_loop_parameter(index).set_body(
    measure(qr[index], cr[index])
    ).set_qubits([qr[index]*[index]]).set_clbits([cr[index]*[index]])


circuit_drawer(qc)



from qiskit import QuantumCircuit

# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
