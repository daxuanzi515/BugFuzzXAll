from qiskit import QuantumCircuit


def my_range(x, y):
    while True:
        if y <= x:
            break
        yield y
        y -= 1

with QuantumCircuit() as quantum_circuit:
    for_loop = QuantumCircuit.for_loop(
            indexset=my_range(10, 0),
            loop_parameter="i",
            body=[
                QuantumCircuit.h(
                    qubit="i"
                ),
                QuantumCircuit.measure(
                    qubits=["i"],
                    clbits=["i"]
                ),
            ],
            qubits=4,
            clbits=4,
            label="my_range_loop"
        )
        
    quantum_circuit.append(
            for_loop,
            qubits=list(range(len(quantum_circuit.qubits))),
            clbits=list(range(len(quantum_circuit.clbits)))
        )

print(quantum_circuit)


# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
