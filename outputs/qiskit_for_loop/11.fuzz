from qiskit import QuantumCircuit

from qiskit.circuit import ForLoopOp
from qiskit.circuit.quantumcircuit import QuantumCircuit
qc = QuantumCircuit(1)

with ForLoopOp(0, 4, body = lambda i: qc[0].h()) as for_loop:
    for_loop.create_iteration(label ='mylabel')
qcs = QuantumCircuit(1)
qcs.h(0)
qcs = qcs.for_loop(body = lambda i: qc[0].h(), label ='mylabel', indexset = range(4), loop_parameter = 'i')
print(qcs.draw())


# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
