from qiskit import QuantumCircuit

circ = QuantumCircuit(2)
with circ.circuit.for_loop(indexset=[0, 1], loop_parameter='j', body=None):
    circ.h(0)
    circ.h(1)
    circ.measure_all()
circ.draw()



from qiskit import QuantumCircuit


circ = QuantumCircuit(2)


with circ.circuit.if_test(condition='1', body = None):
    circ.h(0)


with circ.circuit.if_test(condition='0', body = None):
    circ.h(1)


circ.h(0)

circ.draw()






from qiskit import QuantumCircuit



circ = QuantumCircuit(2)



with circ.circuit.while_loop(condition='1', body = None):
    circ.h(0)
    circ.h(1)



circ.h(1)

circ.draw()


# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
