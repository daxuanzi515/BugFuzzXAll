from qiskit import QuantumCircuit

from qiskit.circuit.quantumregister import QuantumRegister
from qiskit.circuit.classicalregister import ClassicalRegister
from qiskit import QuantumCircuit, ClassicalRegister, QuantumRegister, execute, BasicAer, IBMQ
from qiskit.tools.visualization import plot_histogram
from qiskit.tools.monitor import job_monitor
my_index = [1, 3, 5, 8]
q = QuantumRegister(9, name="q")  
r = ClassicalRegister(9, name="r")
qc = QuantumCircuit(q, r, name="q_qr_circuit")


with qc.for_loop(loop_parameter=r, indexset=my_index) as f:
    f.measure(q, r)



i, j, k = qc.for_loop(loop_parameter=r, indexset=my_index)

qc.h(i)
qc.measure(i, k)
i, j, k, l, m, n = qc.for_loop(
    loop_parameter=r, indexset=my_index, qubits=[
        q[0], q[1], q[2], q[3], q[4], q[5]], clbits=[
        r[0], r[1], r[2], r[3], r[4], r[5]])
qc.x(m)
qc.save_statevector
qc.draw(output='mpl')


qc.save_unitary()
qc.barrier(m)

i, j = qc.for_loop(
    loop_parameter=q, indexset=my_index, qubits=[
        q[0], q[1]])
qc.h(i)
qc.h(j)
i, j, k, l, m, n = qc.for_loop(
    loop_parameter=q, indexset=my_index, qubits=[
        q[0], q[1], q[2], q[3], q[4], q[5]], clbits=[
        r[0], r[1], r[2], r[3], r[4], r[5]
    ])
qc.cx(i, k)
qc.cx(i, l)
qc.measure(i, k)
qc.measure(i, m)


qc.depth()
qc.draw(output='mpl')



# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
