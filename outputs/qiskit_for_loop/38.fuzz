from qiskit import QuantumCircuit

from qiskit.circuit import ForLoopOp
from qiskit import QuantumRegister, ClassicalRegister


qr = QuantumRegister(2, "qr")

cr = ClassicalRegister(2, "cr")
qc = QuantumCircuit(qr, cr)


for_loop_ctx = qc.for_loop([0, 1], loop_parameter="i0", body=[
    (qr[0], cr[0], "measure"), 
    (qr[1], cr[1], "measure"), 
    (qr[0], cr[0], "measure"), 
    ], label="For Loop") 









    


# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
