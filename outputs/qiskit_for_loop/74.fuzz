from qiskit import QuantumCircuit

loop_body = QuantumCircuit(1,1)
loop_body.x(0)
for i in range(5):
    circuit = QuantumCircuit(1,1)
    with circuit.for_loop(range(3), loop_parameter='i', body=loop_body, qubits=range(1)):
        circuit.barrier()
        circuit.measure(range(1),range(1))
    print(circuit)
circuit2 = QuantumCircuit(1,1)
loop_variable = 0
with circuit2.for_loop(range(3), body=loop_body, qubits=range(1)):
    loop_variable += 1
print(circuit2)






# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
