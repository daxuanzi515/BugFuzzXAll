from qiskit import QuantumCircuit

def test(qc, parameter_name, indexset, body, qubits, clbits, label):
    if not qubits:
        qubits = tuple(qc.qubits)
    if not clbits:
        clbits = tuple(qc.clbits)
    loop_var = qc.loop_var(parameter_name)
    loop_op = body.build(qubits, clbits, loop_var, label=label)
    return qc.for_loop(indexset, loop_var, loop_op)
q = QuantumCircuit(1)
q.h(0)
with test(q, 'theta', [0, 1, 2, 3], body=q, qubits=(0,), clbits=(), label="hello") as qc:
    qc.h(0)

print(q)


# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
