from qiskit import QuantumCircuit


indexset = [-1, 0, 1]
loop_parameter = 'i'
body = QuantumCircuit(1).h(0)
qc = QuantumCircuit(2, 2)

with qc.for_loop(indexset, loop_parameter, body) as loop:
    loop.measure(0,0)
res = [qc.measure(m, m) for m in [0, 1]]

loop_variable = 'i'
with QuantumCircuit(1).for_loop(indexset, loop_parameter, loop_variable=loop_variable) as loop:
    loop.h(0)
    loop.measure(0,0)
res = [qc.measure(m, m) for m in [0, 1]]

with QuantumCircuit(1).for_loop(loop_variable=loop_variable, indexset=indexset) as loop:
    loop.h(0)
    loop.measure(0,0)
res = [qc.measure(m, m) for m in [0, 1]]
result = 0
with QuantumCircuit(1).for_loop(indexset=range(10)) as loop:
    loop_variable = loop.get_loop_variable()
    loop.h(0)
    loop.measure(0, 0)
bitstring = "{0:b}".format(result)
qc.y(0).c_if(bitstring, 0)
print(qc)

# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
