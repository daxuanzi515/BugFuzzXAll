from qiskit import QuantumCircuit

def if_func(params, x):
    if x < 1.5:
        return 0
    return 1
def if_else_func(params, x):
    if x > 1:
        return 0
    else:
        return 1
circuit = QuantumCircuit(4, name='if-test-circuit')




circuit.qam.set_available_regs(['c', 'aux'])

circuit.if_test(lambda params: if_func(params, circuit.q[0].value),
                lambda params: if_else_func(params, circuit.q[1].value),
                circuit.q[0],
                circuit.q[1],
                circuit.c,
                circuit.q[2],
                circuit.q[3],
                circuit.aux[0],
                circuit.aux[1])
print(circuit)

# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
