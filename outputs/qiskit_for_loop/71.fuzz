from qiskit import QuantumCircuit

from qiskit.circuit import Parameter  

p = Parameter('p')

with QuantumCircuit(1) as circuit:
    for i, (indexset, register) in circuit.for_loop(indexset=[0, 1, 2],
                                                     loop_parameter=p,
                                                     body=QuantumCircuit(1,
                                                                   1).append(
                                                               QuantumCircuit.h,
                                                               [0],
                                                               []),
                                                     register=p,
                                                     label="pH operation"):
        circuit.append(QuantumCircuit.h, [0])

print(circuit)

# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
