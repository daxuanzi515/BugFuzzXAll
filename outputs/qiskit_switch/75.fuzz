from qiskit import QuantumCircuit

from qiskit.circuit import SwitchCaseOp


circ = QuantumCircuit(1)
circ.x(0)


switch = SwitchCaseOp(circ, 0)  
switch_case_0 = switch.case(0b0).build()
switch_case_1 = switch.case(0b1).build()


with switch.default():
    circ.h(0)  
    switch_case_0.enable()  



circ.h(0)  
switch_case_0.enable()  
circ.h(0)  


switch_case_1.enable()


print(circ.draw())

# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
