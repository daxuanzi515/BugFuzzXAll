from qiskit import QuantumCircuit

from qiskit import QuantumRegister

num_of_qubits = 4
q1 = QuantumRegister(num_of_qubits, 'q')
qc = QuantumCircuit(q1)

with qc.switch(5, 5) as case0:
    case0.z(0)
    case0.x(0)
    case0.cz(0, 3)

with qc.switch(1, 2) as case0:
    case0.cz(0, 1)
    case0.cz(0, 1)
    case0.cz(0, 1)

qc.z(0)
qc.z(0)

qc.cz(1, 3)

qc.draw()

qc.switch(4, 4)
qc.switch(2, 2)
print(qc.count_ops())




# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
