from qiskit import QuantumCircuit



q = QuantumCircuit(2, 2)


q.h([0,1])
q.cx(0,1)



q.switch(2, 0, [q.copy() for q in [q] * 2])
q.p((float(2)/3) * 180,'x')
q.p((float(1)/3) * 180,'x')
q.switch(2, 1, [q.copy() for q in [q] * 2])
q.p((float(1)/3) * 180,'x')
q.p((float(2)/3) * 180,'x')
q.switch(2, 0, (q for q in [q] * 2))


q.measure(0,0)
q.measure(1,1)


print(q.draw('mpl'))

# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
