from qiskit import QuantumCircuit

from qiskit.circuit import Qubit
from qiskit.circuit.library.standard_gates import XGate

qc_00 = QuantumCircuit(3, 3)
qubit_0 = Qubit()
qubit_1 = Qubit()
qc_00.rx(0.3, qubit_0)
qc_00.ry(0.8, qubit_0)
qc_00.cx(qubit_0, qubit_1)
qc_00.cx(qubit_0, qubit_1)
qc_00.rx(0.3, qubit_0)


qc_swh = QuantumCircuit(2, 2)
qc_swh.x(0)
qc_swh.switch((0,), qc_00, (qubit_0,), (qubit_1,),
              add_def=True, label='switch_0')
qc_swh.x(0)


# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
