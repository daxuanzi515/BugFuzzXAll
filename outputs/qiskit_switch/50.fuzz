from qiskit import QuantumCircuit

from qiskit import QuantumRegister
from qiskit import ClassicalRegister
from qiskit import execute
from qiskit import Aer


qubits = 8
cbits = 2 * qubits
qc = QuantumCircuit(qubits, cbits, name="switch-api")

for j in range(qubits, qubits + 2):
    qc.h(j)
for j in range(qubits):
    
    
    circ = QuantumCircuit(1, 1, name="qc_z")
    circ.h(0)
    circ.z(0)
    circ_x = QuantumCircuit(1, 1, name="qc_x")
    circ_x.h(0)
    circ_x.x(0)
    circ_x.append(circ, [0], [])

    
    qc.append(circ_x if j % 2 == 1 else circ, [j])

print(qc)


qc.save_qasm_file("switch-api.qasm")




backend = Aer.get_backend('qasm_simulator')
job_sim = execute(qc, backend, shots=2020)
result_sim = job_sim.result()


from qiskit.visualization import plot_histogram
plot_histogram(result_sim.get_counts())


# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
