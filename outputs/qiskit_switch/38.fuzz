from qiskit import QuantumCircuit

simulator = Aer.get_backend('qasm_simulator')
circuit = QuantumCircuit(4)
circuit.h(1)
circuit.h(2)
circuit.h(3)
circuit.switch(classical=circuit.creg[0], cases=[(circuit.ch(0,1), 1), (circuit.ch(0,2), 2)])
circuit.x(0)
circuit.x(1)
circuit.x(2)
circuit.x(3)
circuit.measure_all()
result = execute(circuit, backend=simulator, shots=10, memory=True).result()
from qiskit.visualization import plot_histogram
plot_histogram(result.get_counts())



# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
