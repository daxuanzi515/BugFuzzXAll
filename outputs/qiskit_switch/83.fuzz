from qiskit import QuantumCircuit


qc_b0 = QuantumCircuit(2)
qc_b0.h(0)
qc_b0.z(1)
qc_t1 = QuantumCircuit(2)
qc_t1.h(0)
qc_t1.cx(0, 1)
qc_t2 = QuantumCircuit(2)
qc_t2.y(0)
qc_t2.cx(0, 1)
qc_t3 = QuantumCircuit(2)
qc_t3.s(0)
qc_t3.h(1)
qcs = [qc_b0, qc_t1, qc_t2, qc_t3]
sw = QuantumCircuit(2, name='sw')
sw.switch(4, *qcs)
sw.draw()

# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
