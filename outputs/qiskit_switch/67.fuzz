from qiskit import QuantumCircuit


qr = QuantumRegister(2, 'input')
cr = ClassicalRegister(2, 'output')
qc = QuantumCircuit(qr, cr)
qc.ccx(qr[0], qr[1], cr[1])
qc.ry(0.6, qr[1]).c_if(cr, 1)
qc.cx(qr[1], cr[1]).c_if(cr, 0)
qc.x(qr[1]).c_if(cr, 1)
qc.ccx(qr[0], qr[1], cr[1]).c_if(cr, 0)

print(qc.decompose().draw())



# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
