from qiskit import QuantumCircuit

from qiskit.circuit import QuantumRegister, ClassicalRegister
from qiskit.circuit.library.standard_gates import XGate

cr = ClassicalRegister(4, 'creg')
qr = QuantumRegister(4, 'qreg')

circuit_switch_in_python = QuantumCircuit(qr, cr)

switch_condition = cr[0]

with circuit_switch_in_python.switch(switch_condition):
    circuit_switch_in_python.x(qr[0])
print(circuit_switch_in_python)

# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
