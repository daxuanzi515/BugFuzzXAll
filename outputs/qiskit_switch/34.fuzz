from qiskit import QuantumCircuit

qr = QuantumRegister(4, 'qr')
circ = QuantumCircuit(qr)
circ.cx(0,1)



from qiskit import QuantumCircuit
from qiskit.circuit import SwitchGate

qr = QuantumRegister(13, 'qr')
circ = QuantumCircuit(qr)


circ.append(SwitchGate([0, 3, 2, 0, 0, 2, 0, 1, 0, 0, 0, 0],
                       1,
                       [1, 0, 1, 1, 0, 0, 2, 0, 0, 1, 0, 0]), qr[0:2])
circ.h(3)

# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
