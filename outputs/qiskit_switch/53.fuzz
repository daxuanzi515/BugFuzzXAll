from qiskit import QuantumCircuit

from qiskit import QuantumRegister, ClassicalRegister
circuit = QuantumCircuit(name='Switch API test')


cr = ClassicalRegister(2, 'control')
q = QuantumRegister(3)

circuit.add_register([cr, q])
circuit.add_instruction(XGate(), q[0])
circuit.add_instruction(CXGate(), [q[1], q[2]])

circuit.x(cr[0])
circuit.x(q[0])
circuit.x(q[2])

circuit.switch(cr, 0, then_circuit=circuit, else_circuit=None)
print(circuit.draw())


# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
