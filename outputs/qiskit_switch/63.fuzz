from qiskit import QuantumCircuit


def generate_circuit(n_cases: int) -> QuantumCircuit:
    qc = QuantumCircuit(3, 4)
    (q, c) = (0, 1)
    default_value = 15

    for i in range(0, n_cases):
        value = i
        qc.switch(q, default_value, value, n_cases - i - 1)
        qc.cswap(i, i + 1, default_value + i + 2)

    return qc

qc = generate_circuit(4)


# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
