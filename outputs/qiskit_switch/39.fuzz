from qiskit import QuantumCircuit



qc = QuantumCircuit(3)
qc.cu1(0.3, 1, 2)
qc.h(0)
qc.cx(0, 1)
qc.tdg(0)


with qc.case(0):
    qc.x(0)
    qc.y(0)
    qc.z(0)
    qc.barrier()

with qc.case(1):
    qc.x(1)
    qc.z(1)
    qc.measure_all()
qc.draw()

qc = QuantumCircuit(3)
with qc.case(0):
    qc.x(0)
    qc.y(0)
    qc.z(0)
    qc.cx(0, 2)
qc.draw()


# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
