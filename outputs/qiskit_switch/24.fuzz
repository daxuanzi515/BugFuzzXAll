from qiskit import QuantumCircuit

qc = QuantumCircuit(4, name='demo_switch')

a = c_i.ClassicalRegister(4, name='a')
classical_register=c_i.ClassicalRegister(2, name='c')
qc.add_register(a)
qc.add_register(classical_register)
qc.cx(0, 1)
qc.cx(1, 2)
qc.cx(2, 3)
qc.measure(0, a[0])
qc.measure(1, a[1])
qc.measure(2, a[2])
qc.measure(3, a[3])

def switch_demo(x):
    for i in [0, 1, 2]:
        if i == x:
            for j in [1,3]:
                qc.cx(j, i-1)
            return qc
        
qc.barrier()
qc = qc.extend(switch_demo, (2,), inplace=False)
qc.draw()
print(qc)



# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
