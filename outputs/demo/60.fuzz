#include <iostream>
using namespace std;
void myTest()
{
    string myString("test");
    cout << myString;
}
int main() {
    myTest();
    return 0;
}
 
#include <iostream>
using namespace std;
class Calculator
{
private:
    double val;
public:
    Calculator(): val {0.} {}
    void setVal(double v) {val = v;};
    double add(double a);
};
double Calculator::add(double a)
{
    return val + a;
}
int main()
{
    Calculator calc;
    calc.setVal(2.);
    cout << calc.add(3) << endl;
}
 
#include <iostream>
#include <cstdlib>
#define MAXV 100
#define MAX_ARG_TYPES 6
using namespace std
using lambda_func = double(*)(double (*)(double), double);
template <typename function_type>
function_type *make_func_ptr(function_type &my_func, int n_types,...)
{
    va_list vl;
    va_start(vl, n_types);

    for (int i {0}; i < n_types; ++i)
    {
        int t = va_arg(vl, int);
        cout << "type: " << t;
    }
    va_end(vl);
}
template <typename T, typename F>
void my_max(T my_vector[MAXV], F my_func)
{
    double m = my_vector[0];
    for (int i {1}; i < MAXV; ++i)
    {
        if(m < my_vector[i])
        {
            m = my_vector[i];
        }
    }
    cout << my_func(m);
}
int main()
{
    double my_vector[MAXV];
    for(int i {0}; i < MAXV; ++i)
    {
        my_vector[i] = (double)i;
    }
    make_func_ptr([](double x){return x;}, 1, 2);
    auto my_func = &log10;
    auto my_func2 = [](double x){return x;};
    my_max(my_vector, my_func)
    my_max(my_vector, my_vector[3])
}

