#include <tuple>
#include <string>
#include <tuple>
#include <iostream>
int main()
{
  auto args = std::make_tuple(42L, std::make_pair(13L, std::string{"foo"}));
  auto f = [](long, std::pair<long, std::string>)
  { std::cout << "Bar(long, std::pair<long, std::string>" << std::endl; };
  std::get<0>(args) = 42L;
  std::get<1>(args).first = 13L;
  std::apply(f, args);
  return EXIT_SUCCESS;
}
 
#include <tuple>
#include <type_traits>
#include <iostream>
auto f = []() -> int { std::cout << "Print 1\n"; return 1; };
auto g = []() -> int { std::cout << "Print 2\n"; return 2; };
int main()
{
   
  auto r0 = std::apply(f, std::make_tuple());  
  auto r1 = std::apply(g, std::make_tuple());  
  auto r2 = std::invoke(f, std::make_tuple());  
  auto r3 = std::invoke(g, std::make_tuple());  
  std::cout << r0 << " "
            << r1 << " "
            << r2 << " "
            << r3 << std::endl;
  return EXIT_SUCCESS;
}
 
#include <type_traits>
#include <tuple>
#include <utility>
#include <type_traits>
#include <functional>
#include <iostream>

void foo(int n)
{ std::cout << "Foo " << n << std::endl; }
char bar(long m)
{ std::cout << "Bar " << m << std::endl; return 'c'; }
int baz(double n)
{ std::cout << "Baz " << n << std::endl; return -1; }
void zed(float* b, auto c)
{ std::cout << "Zed " << b << " " << c << std::endl; }
void f(int n)
{ std::cout << "  f " << n << std::endl; }
float g(char c)
{ std::cout << "  g " << c << std::endl; return