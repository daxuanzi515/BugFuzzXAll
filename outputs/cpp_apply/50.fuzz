#include <tuple>
#include <iostream>
#include <cstdlib>
 
int main() {
  std::tuple<int> t = std::make_tuple(99);
  std::apply([](int& x) {std::cout << "Before: " << x << '\n'; 
    x = 91;
     std::cout << "After: " << x << '\n';
  }, t);
  return EXIT_SUCCESS;
}
 
#include <iostream>
#include <array>
 
int main(void) {
  std::array <double,2> m{ 6, 9 };

  std::cout << m[1] << std::endl;
  m[1] = m[1] + m[0];
  
  std::cout << m[1] << std::endl;
 
  std::cout << m[0] << std::endl;
 
  int d[] = {6, 9};
  int c[] = { 9, 6 };
  int *p = &d[1]; 
  auto c_p = std::make_pair(c, c + sizeof(c) / sizeof(int)); 
  auto *ptr = new int[50];

   

  int(&r)[2] = m; 
  std::cout << r[1] << std::endl; 
  r[1] = r[1] + r[0]; 
  std::cout << r[1] << std::endl;
 
  std::cout << r[0] << std::endl; 
 
  p = c;

   
  std::cout << "p - m.data(): " << p - m.data() << std::endl;   
  std::cout << "p - m: " << p - m << std::endl;               

  std::cout << std::endl;
  std::cout << "m - c: " << m - c << std::endl; 
  std::cout << "m!= c: " << (m!= c) << std::endl; 

  std::cout << std::endl; 
  std::cout << "c_p - m: " << (c_p - m) << std::endl; 
  std::cout << "c_p!= m: " << (c_p!= m) << std::endl; 

  delete[] ptr; 
  return 0; 
  }
 
#include <iostream>
 
int main()
{
  for (int q = 0; q < 10; ++q)
    std::cout << q <<'';

  return 0;
}
/* Let