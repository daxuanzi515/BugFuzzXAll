#include <expected>
, int32_t, 0> >();
	constexpr auto e3 = std::make_unexpected(12);

	constexpr auto r2 = foo(std::in_place, 1);
	static_assert(r2 == 1);

	 

	return 0;
}
<fim_middle>
#include <type_traits>
#include <iostream>
#include <utility>
#include <cstdint>

template<class T, class E>
constexpr void print(std::expected<T, E>& t)
{
	auto print_v = [](auto t)  {
		if constexpr (std::is_void_v<std::decay_t<T>>) {
			std::printf("Empty\n");
		}
		else {
			std::cout << t << '\n';
		}
	};

	if (t) {
		print_v(*t);
	}
	else {
		print_v(*t.error());
	}
}

int32_t foo(std::in_place_t, double x)
{
	return 1;
}

int32_t foo(std::in_place_t, double x, double y)
{
	return 3;
}

int main() {
	print(std::make_unexpected(1));
	print(std::make_unexpected(1.5));
	print(std::make_unexpected(true));  
	print(std::make_unexpected((char*)42));  
	std::cout << "---" << std::endl;

	print(foo(std::in_place, 12, 34));
	print(1);
	print(42);
	 
	 
	return 0;
}

#include <variant>
#include <cstdint>
#include <cstdio>

int32_t foo(std::in_place_t, int32_t x)
{
	return x;
}

int32_t foo(std::in_place_t, int32_t x, int32_t y)
{
	return x + y;
}

constexpr int main() noexcept
{
	 

	constexpr auto r = foo(std::in_place, 12, 34);
	constexpr auto r2 = foo(std::in_place, 12, 34.5);
	constexpr auto r3 = foo(std::in_place, 12, 34);
	constexpr auto r4 = foo(std::in_place, 12, 34.5);

	constexpr auto e1 = std::make_unexpected(2);
