#include <expected>
<fim_suffix>(error);
    return 0;
}
 <fim_middle>

using namespace std;
using std::literals::string_literals::operator""s;

optional<int> foo(int x)
{
    if (x == 3) {
        return nullopt;
    }
    else if (x > 0){
        return x * 3 + 1;
    }
    else{
        throw std::logic_error("only positive values are allowed");
    }
}
int bar()
{
     
    return nullopt;
}

std::optional<double> foo2(double a, double b)
{
    if (b == 0) {
        return std::nullopt;
    }
    return std::make_expected(a / b);
}

 
 
 
 
 
 
 


int main()
{
    std::cout << typeid(decltype(foo(42))).name() << std::endl;
    std::cout << std::boolalpha;  
     
     
     
    std::cout << foo2(2, 0.5) << "\n";
     
    std::cout << foo2(3, 10) << "\n";
     
     

     
     
     
     
     
     
     
     
     
     
    
     
    auto res = foo(42);

   