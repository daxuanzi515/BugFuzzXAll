#include <expected>
<fim_suffix>ng long int> a(101);
  std::expected<unsigned long long int, std::error_code> b(a.get() + 101);

  std::cout << a << std::endl;
  std::cout << b << std::endl;

  std::cout << a.value() + 1;
  std::cout << b.value_or(value_b);

  std::cout << a + 1;
  std::cout << b + 1;

  std::cout << (a + 1 == b);

  std::cout << value_expected << std::endl;
  std::cout << value_a << std::endl;
  std::cout << value_a.value() << std::endl;
  std::cout << value_a.value_or(-1) << std::endl;
  std::cout << value_a.get() << std::endl;

  std::cout << (value_a.has_value()) << std::endl;
  std::cout << (value_a.has_error()) << std::endl;
  std::cout << (value_expected.has_error()) << std::endl;

  std::cout << std::boolalpha << ( value_actual.has_value() && value_b.has_value() && value_b.has_error() && value_b < value_a);
  std::cout << std::noboolalpha << std::endl;
}<fim_middle>   

#include <iostream>
#include <stdexcept>

namespace std
{
   
  template<>
  class unexpected<std::error_code>
  {
    std::error_code error_code_;   

  public:
     
    unexpected() = delete;
    unexpected(const unexpected& ec) = default;
    unexpected& operator=(const unexpected& ec) = default;
    unexpected(unexpected&& ec) = default;
    unexpected& operator=(unexpected&& ec) = default;

    template<class _Err> requires (not std::is_void<_Err>::value)
    unexpected(_Err&& obj) : error_code_{std::forward<_Err>(obj)}
    {}

    explicit operator bool() const;
    std::error_code code() const { return error_code_; }
    bool operator==(const unexpected& rhs) const { return error_code_ == rhs.code(); }
    bool operator!=(const unexpected& rhs) const { return error_code_!= rhs.code(); }
  };

  inline char const* unexpected_t_what() { return "Unexpected error"; }
}

int main()
{
  constexpr int value_a = 101;
  constexpr int value_b = 202;
  constexpr int value_expected = 1u + (2u < 3);    
  constexpr int value_actual =!(0u < 1u);         
  

  std::expected<int> value_expected_int (value_a);