#include <iostream>
#include <vector>
#include <memory>
#include <limits>
#include <new>
#include <optional>
#include <variant>
#include <concepts>
#include <ranges>
using namespace std;
struct Employee {
    void* secretDataPtr{nullptr};
    void* myAddressPtr{nullptr};
    Employee() {
        Employee* p{this};
        p->secretDataPtr = new int;
        secretDataPtr = p->secretDataPtr;
        myAddressPtr = (void*)&p;
    }
    ~Employee() {
        delete reinterpret_cast<int*>(secretDataPtr);
    }
    void printMyAddressPtr() {
        cout << "myAddressPtr: " << myAddressPtr << '\n';
    }
    template<typename _Tp> friend Employee operator>>(const Employee& emp, _Tp& x);
};
Employee operator>>(const Employee& emp, Employee& x)
{
    x.secretDataPtr = emp.secretDataPtr;
    x.myAddressPtr = emp.myAddressPtr;
    return x;
}
void printEmployeeSecretDataPtr(Employee emp)
{
    int* secretDataPtr{reinterpret_cast<int*>(emp.secretDataPtr)};
    cout << *secretDataPtr;
}
int main()
{
     
    Employee emp{};
    emp.printMyAddressPtr();
     
     
    Employee emp2{emp};
    printEmployeeSecretDataPtr(emp2);
    return 0;
}
