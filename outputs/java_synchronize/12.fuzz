import java.lang.Object;
class SampleData {
    void write() { System.out.println("Write operation to SampleData is invoked!"); }
    void read() { System.out.println("Read operation to SampleData is invoked!"); }
}
class MultiThreadedData {
    SampleData data;
    public synchronized void read() { data.read(); }
    public synchronized void write() { data.write(); }
    public synchronized void testWriteAndRead() {
        write(); read();
    }
}
 
import java.lang.Object;
class SampleData {
    void write() { System.out.println("Write operation to SampleData is invoked!"); }
    void read() { System.out.println("Read operation to SampleData is invoked!"); }
}
class MultiThreadedData {
    SampleData data;
    public synchronized void read() { data.read(); }
    public synchronized void write() { data.write(); }
    public void testWriteAndRead() {
        synchronized(data) { write(); read(); }
    }
}
 
import java.lang.Object;
class SampleData {
    void write() {
        synchronized(this) {
            System.out.println("Write operation to SampleData is invoked!");
        }
    }
    public void invoke() { write(); }
    public void invokeException() throws RuntimeException {
        try {
            write();
        } catch (RuntimeException f) {
            System.out.println("RuntimeException caught from: " + f);
        }
    }
}
class MultiThreadedData extends SampleData {
    public synchronized void testMultiThreadWriteAndRead() {
        Thread a = new Thread(() -> { invoke(); invokeException(); });
        Thread b = new Thread(() -> { invoke(); invokeException(); });
        a.start(); b.start();
    }
}
 
import java.lang.Object;
class SampleData {
    void write() {
        synchronized(this) {
            System.out.println("Write operation to SampleData is invoked!");
        }
    }
    public void invoke() { write(); }
    public void invokeException() throws RuntimeException {
        try {
            write();
        } catch (RuntimeException f) {
            System.out.println("RuntimeException caught from: " + f);
        }
    }
}
class MultiThreadedData extends SampleData {
    public synchronized void testMultiThreadWriteAndRead() throws IOException {
        Thread a = new Thread(() -> { invoke(); invokeException(); });
        Thread b = new Thread(() -> { invoke(); invokeException(); });
        a.start(); b.start();
    }
}
