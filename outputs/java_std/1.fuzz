import java.lang.Object;

import java.util.concurrent.DelayQueue;
import java.util.concurrent.*;
import java.util.Timer;
class MyThread extends Thread {
    public void call(){
        System.out.println("Hello World");
    }
}
public class Driver {
    public static void main(String args[]) throws InterruptedException {
        class MyThread1 extends Thread {
            @Override
            public void run() {
                try {
                    Thread.sleep(5000);
                    System.out.println();
                    for (int i = 0; i < 100; i++) {
                        if (i%10 == 0) System.out.println();
                        float[] nums = new float[10000];
                        for (int j = 0; j < 10000; j++)
                            nums[i] = i;
                        System.out.print(nums[(i - 1)]!= 0? (i + 1) : 0);
                    }
                } catch (InterruptedException ignored) {
                }
            }
        }
        class MyThread2 extends Thread {
            @Override
            public void run() {
                try {
                    Thread.sleep(10000);
                    System.out.println();
                    for (int i = 0; i < 100; i++) {
                        if (i%10 == 0) System.out.println();
                        float[] nums = new float[10000];
                        for (int j = 0; j < 10000; j++)
                            nums[i] = i;
                        System.out.print(nums[(i - 1)]!= 0? (i + 1) : 0);
                    }
                } catch (InterruptedException ignored) {
                }
            }
        }
        long startTime = System.nanoTime();
        new MyThread1().start();
        new MyThread2().start();
        long endTime = System.nanoTime();
        if (endTime - startTime >= 0){
            System.out.println("Total time taken ::" + (endTime - startTime));
        } else {
            System.out.println("No time");
        }
    }
}