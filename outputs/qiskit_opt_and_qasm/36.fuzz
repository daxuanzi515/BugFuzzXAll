from qiskit import QuantumCircuit

from qiskit import Aer
backend_sim = Aer.get_backend("statevector_simulator")
circ = QuantumCircuit(2)
circ.h(0)
circ.h(1)
circ.cx(0, 1)
circ.measure_all()
result = backend_sim.run(circ, shots=1024).result()
counts_dict_bell = result.get_counts(circ)
print(counts_dict_bell)
import qiskit.providers.aer as aer
def create_circuit_bell():
    circuit = aer.get_backend('qasm_simulator')
    circuit.draw()
    circ = QuantumCircuit(2)
    circ.h(0)
    circ.cx(0,1)
    circ.measure_all()
    circ.draw(output='mpl')
    result = circuit.run(circ, shots=1024).result() 
    counts_dict_bell = result.get_counts(circ)
    circuit_bell = {"counts": counts_dict_bell, "circuit_obj": circ}

# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
