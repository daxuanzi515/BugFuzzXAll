from qiskit import QuantumCircuit


def mutate_circuit(circ):
    
    return circ

def run_circuit(circ):
    
    return results

    
my_quantum_circuit = create_quantum_circuit()
my_quantum_circuit = mutate_quantum_circuit()
my_results = run_quantum_circuit()
plot_histogram(my_results.get_counts(my_quantum_circuit))



def circuit_from_quantum_circuit(circ):
    new_circuit = QuantumCircuit(2)
    
    return new_circuit
    


def replace_gate(circ):
    
    return updated_circuit

# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
