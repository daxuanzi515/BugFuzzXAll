from qiskit import QuantumCircuit


q = QuantumRegister(3, 'q')
c = ClassicalRegister(3, 'c')
qc = QuantumCircuit(q, c)


qc.u3(0.3, 0.2, 0.1, 0)
qc.h(1)
qc.cx(1, 2)
qc.cx(0, 1)
qc.measure([0,1,2], [0,1,2])
qc.draw()

simulator = Aer.get_backend('aer_simulator')
result = execute(qc, backend=simulator, shots=1024).result()
counts = result.get_counts(qc)
print("\nTotal count for 001 and 100 are:", counts)

# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
