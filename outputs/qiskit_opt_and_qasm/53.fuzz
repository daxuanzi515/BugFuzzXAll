from qiskit import QuantumCircuit


circuit = QuantumCircuit(2, 2)
circuit.reset(range(2))
circuit.h(0)
circuit.measure_all()


aer_sim = QasmSimulator()
result = aer_sim.run(circuit, shots=1024).result()

counts_dict_bell = result.get_counts(circuit)
print("{bell} {bell_percent}".format(bell=counts_dict_bell, 
                                      bell_percent="{}%".format(int(counts_dict_bell['00']*100.0/1024.0)) if '00' in counts_dict_bell else "na"))
print("{bell} {bell_percent}".format(bell=counts_dict_bell, 
                                      bell_percent="{}%".format(int(counts_dict_bell['01']*100.0/1024.0)) if '01' in counts_dict_bell else 'na'))

from qiskit.tools.visualization import plot_histogram

# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
