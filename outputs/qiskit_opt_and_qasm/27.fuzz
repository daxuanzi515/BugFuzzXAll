from qiskit import QuantumCircuit

from qiskit import Aer
backend_sim = Aer.get_backend("statevector_simulator")
circ = QuantumCircuit(1)
circ.x(0)
circ1 = QuantumCircuit(1)
circ1.z(0)
circ2 = QuantumCircuit(1)
circ2.s(0)

circ.append(circ1.to_instruction(), [0])
circ.append(circ2.to_instruction(), [0])
circ.measure_all()
result = backend_sim.run(circ, shots=1024).result()
counts_dict_bell_x = result.get_counts(circ)
print(counts_dict_bell_x)
from qiskit.extensions import XGate, ZGate, SGate

def create_circuit_bell_x():
    circuit = aer.get_backend('qasm_simulator')
    circuit.draw()
    circ = QuantumCircuit(1)
    circ.x(0)
    circuit_x = circ
    circ1 = QuantumCircuit(1)
    circ1.append(XGate(), [0])
    circ2 = QuantumCircuit(1)
    circ2.append(ZGate(), [0])
    circ3 = QuantumCircuit(1)
    circ3.append(SGate(), [0])

    circ.append(circ1.to_instruction(), [0])
    circ.append(circ2.to_instruction(), [0])
    circ.append(circ3.to_instruction(), [0])
    
    circ.measure_all()

# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
