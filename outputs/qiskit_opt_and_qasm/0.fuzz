from qiskit import QuantumCircuit

q1 = QuantumCircuit(2,2)
q1.x(0)
q1.measure(range(2), range(2))
display(q1.draw())

from qiskit.opflow import Z
from qiskit.opflow import StateFn
psi = StateFn(Z ^ Z ^ Z)
from qiskit.algorithms import VQE
vqe = VQE(ansatz=q1, optimizer=None, quantum_instance=Aer.get_backend('statevector_simulator'), callback=print)
result = vqe.compute(psi)
print("Expectation value with the Hadamard is :", result.expectation)


# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
