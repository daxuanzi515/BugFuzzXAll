from qiskit import QuantumCircuit

from qiskit import Aer
backend_sim = Aer.get_backend("statevector_simulator")

from qiskit import QuantumCircuit, ClassicalRegister, QuantumRegister, BasicAer
reg = QuantumRegister(1)
creg = ClassicalRegister(1)
circ = QuantumCircuit(reg, creg)
circ.h(0)
circ.barrier()
circ.measure(0, 0)
circ.draw()
circuit_sim = BasicAer.get_backend('qasm_simulator')
job_sim = circuit_sim.run(circ)
result_sim = job_sim.result()
counts = result_sim.get_counts(circ)
print("{0:<15}{1:>15}".format("Outcome", "Count"))
print("="*30)
for outcome in counts:
    print("{0:<15}{1:>15}".format(outcome, counts[outcome]))


# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
