from qiskit import QuantumCircuit

def create_quantum_circuit():
    circuit = QuantumCircuit(2)
    circuit.rx(0.3, 0)
    circuit.ry(0.4, 1)
    circuit.draw()
def run_quantum_circuit():
    simulator = Aer.get_backend('aer_simulator')
    result = execute(circuit, backend).result() 
    counts_dict = result.get_counts(circuit)
    print("\nTotal count for 00 and 11 are:", counts_dict)
    return counts_dict
from qiskit import QuantumCircuit, execute, Aer
circuit = QuantumCircuit(2, 2)
circuit.h(0)
circuit.cx(0, 1)
circuit.measure([0,1], [0,1])
circuit.draw()
from qiskit.visualization import plot_histogram
simulator = Aer.get_backend('aer_simulator')
result = execute(circuit, simulator).result()
counts = result.get_counts(circuit)
print("\nTotal count for 00 and 11 are:", counts)
plot_histogram(counts)


# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
