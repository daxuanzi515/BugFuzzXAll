from qiskit import QuantumCircuit

def create_circuit_2():
    circuit = QuantumCircuit(2)
    circuit.reset(range(2)) 
    circuit.h(0)
    circuit.h(1)
    circuit.draw()
def run_circuit_2():
    result = circuit.run(shots=1024).result() 
    counts_dict = result.get_counts()
    circuit_bell_2 = {"count": counts_dict, "circuit_obj": circuit}
    return counts_dict
import qiskit 


from qiskit.circuit import ClassicalRegister, QuantumRegister, QuantumCircuit
from qiskit import * 
from qiskit.visualization import plot_histogram

my_backend = Aer.get_backend('qasm_simulator')

circuit = QuantumCircuit(2,2)

circuit.h(0)
circuit.reset(1)
circuit.measure([0,1],[0,1])

circuit.draw(output ='mpl')

job = execute(circuit,backend = my_backend, shots = 1000)

result = job.result()

counts =result.get_counts(circuit) 


# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
