from qiskit import QuantumCircuit

def add_bits():
    circuit = QuantumCircuit(3)
    circuit.reset(range(3))
    circuit.draw()
    return circuit
def add_bits_1():
    circuit_1 = QuantumCircuit(3)
    circuit_1.rx(0.3, 1)
    circuit_1.draw()
def add_circuit():
    circuit_3a = add_bits()
    circuit_3b = add_bits_1()
    circuit_3c = add_bits()
    circuit_3c.cx(1, 2)
    circuit_3c.draw()
    circuit_3a.extend(circuit_3b, range(2), range(2))  
    circuit_3a.draw()

add_circuit()
from qiskit import QuantumCircuit
def add_gate():
    circuit = QuantumCircuit(3, 3)
    circuit.add_register(qubits)
    circuit.h(qubits[0])
    circuit.cx(qubits[0], qubits[1])
    circuit.draw()

# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
