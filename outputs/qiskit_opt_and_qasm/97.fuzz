from qiskit import QuantumCircuit

def alter_create_circuit():
    circuit = QuantumCircuit(2)
    circuit.reset(range(2))
    circuit.rx(0.5, 0)
    circuit.ry(0.5, 1)
    return circuit
quantum_circuit_x2 = alter_create_circuit()
quantum_circuit_x2.draw()
def compute_probs(counts):
    prob_00 = counts['00'] / sum(counts.values())
    return prob_00
counts = run_circuit()
compute_probs(counts)
counts_dict = run_circuit()
print(counts_dict)
from qiskit.visualization import plot_histogram

# ==================== ORACLE ====================
from qiskit.compiler import transpile
from qiskit import QuantumCircuit
class CustomFuzzAllException(Exception):
    pass
# get any the global variables (including the circuits)
global_vars = list(globals().keys())
# keep all those that are QuantumCircuit
circuits = [
    globals()[var] for var in global_vars
    if isinstance(globals()[var], QuantumCircuit)
]
try:
    # transpile them
    for circuit in circuits:
        for lvl in range(0, 4):
            res = transpile(circuit, optimization_level=lvl)
            # print(f"Optimization level {lvl} for circuit {circuit.name}")
            # print(res.draw())

    # conert them to qasm and back
    for circuit in circuits:
        # print(f"Converting to qasm and back for circuit {circuit.name}")
        QuantumCircuit().from_qasm_str(circuit.qasm())
except Exception as e:
    raise CustomFuzzAllException(e)
# ==================== ORACLE ====================
